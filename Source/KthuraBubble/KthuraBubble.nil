// License Information:
// KthuraBubble/KthuraBubble.nil
// Kthura NIL Glue
// version: 19.08.11
// Copyright (C)  Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information



#say "Kthura!"

table _actorlist


class KthuraActor
	
	readonly string Tag
	
	int ParentID
		
	void CONSTRUCTOR(string sTag,parent)
		assert(parent and type(parent)=="table" and parent[".classname"]=="Kthura","None or incorrect parent given") //"\n"..type(parent).." / "..(parent or {[".classname"]="<nil>"})[".classname"])
		self.Tag=sTag
		self.ParentID = parent.ID
		_actorlist[self.Tag] = self
	end
	
	void DESTRUCTOR()
		print("Kthura Actor destroyed!")
		#pure
		if CSay then CSay("Kthura Actor Destroyed!") end
		#endpure
	end
	
	get bool Exists
		return BKTHURA:ActorExists(self.ParentID,self.Tag)
	end
	
	get int X
		return BKTHURA:GetX(self.ParentID,self.Tag)
	end
	
	get int Y
		return BKTHURA:GetY(self.ParentID,self.Tag)
	end
	
	get var Coords
		return self.X,self.Y
	end
	
	get string Texture
		return BKTHURA:GetObjTex(self.ParentID,self.Tag)
	end
	
	set string Texture
		BKTHURA:SetObjTex(self.ParentID,self.Tag,value)
	end
	
	get string Wind
		return BKTHURA:GetActorWind(self.ParentID,self.Tag)
	end
	
	set string Wind
		BKTHURA:SetActorWind(self.ParentID,self.Tag,value)
	end
	
	void Spawn(string exittag,onlyifnew)
		if onlyifnew and self.Exists
			return 
		end
		BKTHURA:Spawn(self.ParentID,self.Tag,exittag)
	end
	
	void Destroy()
		//self.parentmap = nil;
	end
	
	void WalkTo(A,B,C)
		if (type(A)=="number" and type(B)=="number")
			#pure
			if (CSay) then CSay("Walkto request: ("..A..","..B.."); Real: "..tostring(C~=false)) end
			#endpure
			BKTHURA:WalkToCoords(self.ParentID,self.Tag,A,B,C!=false)
		elseif type(A)=="string"
			BKTHURA:WalkToSpot(A)
		end
	end
	
end


class Kthura
	readonly int ID
	static delegate PermaStore
	
	readonly table Actor
	
	get int ScrollX
		return BKTHURA:GetScroll(self.ID,"X")
	end
	
	set int ScrollX
		BKTHURA:SetScroll(self.ID,"X",value)
	end

	get int ScrollY
		return BKTHURA:GetScroll(self.ID,"Y")
	end
	
	set int ScrollY
		BKTHURA:SetScroll(self.ID,"Y",value)
	end
	
	get string Layer
		return BKTHURA:GetLayer(self.ID)
	end
	
	set string Layer
		// CSay("Switching to layer: "..value)
		BKTHURA:SetLayer(self.ID,value)
	end
	
	get bool AutoRemap
		return BKTHURA:GetAutoRemap(self.ID)
	end
	
	set bool AutoRemap
		BKTHURA:SetAutoRemap(self.ID,value)
	end
	
	void Remap()
		BKTHURA:TotalRemap(self.ID)
	end
	
	void Kill(string tag)
		BKTHURA:Kill(self.ID,tag)
	end
	
	void PermaKill(string tag)
		assert(self.PermaStore,"Kthura.PermaStore not configured! Cannot PermaKill!")
		Kill(tag)
		self.PermaStore('LocalKthura.Kill("'..tag..'"))\n')
	end
	
	void Draw(x,y)
		BKTHURA:Draw(self.ID,x or 0, y or 0)
	end
	
	table CountObjects()
		string tstring
		tstring = BKTHURA:CountObjects(self.ID)
		//CSay(tstring)
		#pure
		return (loadstring or load)(tstring)()
		#endpure
	end
	
	void Destroy()
		if self.ID!=0
			BKTHURA:Destroy(self.ID)
		end
		table kill
		for k,v in pairs(_actorlist[self.ID])
			// v.ParentMap=nil;
			kill[#kill+1]=k
		end
		for _,k in ipairs(kill)
			_actorlist[self.ID][k].Destroy()
			_actorlist[self.ID][k]=nil;
		end
		_actorlist[self.ID]=nil;
	end
	
	void DESTRUCTOR()
		self.Destroy()
	end
	
	private table mdata
	set table Data
		error("The field \"Data\" is read-only!")
	end
	
	get table Data
		return self.mdata
	end
	
	
	
	void CONSTRUCTOR(mapname)
		switch type(mapname)
			case "nil"
				self.ID = BKTHURA:Create()
			case "string"
				self.ID = BKTHURA:Load(mapname)
			default
				error("Invalid input for initiating a Kthura Map! ("+type(mapname)+")")
		end
		setmetatable(self.mdata,{
			['__newindex'] = void(t,string k,string v)
				BKTHURA:SetData(self.ID,k,v)
			end,
			['__index'] = string(t,k)
				return BKTHURA:GetData(self.ID,k)
			end,
			['__call'] = table(t)
				string tempscript
				table temptable
				tempscript = BKTHURA:GetDataKeys(self.ID)
				// CSay(tempscript) // debug
				temptable = assert(NIL.LuaLoadString(tempscript))
				return temptable()
			end
		})
		_actorlist[self.ID] = {}
		table ActorMeta		
		ActorMeta.__newindex = void()
			error("Kthura.Actor is a read-only table!")
		end		
		ActorMeta.__index = var(t,string k)
			_actorlist[self.ID][k] = _actorlist[self.ID][k] or new KthuraActor(k,self)
			return _actorlist[k]
		end
		setmetatable(self.Actor,ActorMeta)
	end
	
	
end







